// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SnapLink_Repository.DBContext;

#nullable disable

namespace SnapLink_API.Migrations
{
    [DbContext(typeof(SnaplinkDbContext))]
    [Migration("20250808151559_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SnapLink_Repository.Entity.Administrator", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("adminId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("AccessLevel")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("accessLevel");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("department");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("AdminId")
                        .HasName("PK__Administ__AD0500A64814467C");

                    b.HasIndex("UserId");

                    b.ToTable("Administrator", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Advertisement", b =>
                {
                    b.Property<int>("AdvertisementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("advertisementId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdvertisementId"));

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("endDate");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("imageUrl");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("locationId");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("paymentId");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("startDate");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("AdvertisementId")
                        .HasName("PK__Advertis__4729E935E7D591B6");

                    b.HasIndex("LocationId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Advertisement", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Availability", b =>
                {
                    b.Property<int>("AvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("availabilityId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvailabilityId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int")
                        .HasColumnName("dayOfWeek");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("endTime");

                    b.Property<int>("PhotographerId")
                        .HasColumnType("int")
                        .HasColumnName("photographerId");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("startTime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt");

                    b.HasKey("AvailabilityId")
                        .HasName("PK__Availability__AvailabilityId");

                    b.HasIndex("DayOfWeek")
                        .HasDatabaseName("IX_Availability_DayOfWeek");

                    b.HasIndex("PhotographerId")
                        .HasDatabaseName("IX_Availability_PhotographerId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Availability_Status");

                    b.HasIndex("PhotographerId", "DayOfWeek", "Status")
                        .HasDatabaseName("IX_Availability_Photographer_Day_Status");

                    b.HasIndex("DayOfWeek", "Status", "StartTime", "EndTime")
                        .HasDatabaseName("IX_Availability_Day_Status_Time");

                    b.ToTable("Availability", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bookingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("endDatetime");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("locationId");

                    b.Property<int>("PhotographerId")
                        .HasColumnType("int")
                        .HasColumnName("photographerId");

                    b.Property<string>("SpecialRequests")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("specialRequests");

                    b.Property<DateTime?>("StartDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("startDatetime");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("totalPrice");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("BookingId")
                        .HasName("PK__Booking__C6D03BCDDFA35959");

                    b.HasIndex("LocationId");

                    b.HasIndex("PhotographerId");

                    b.HasIndex("UserId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Complaint", b =>
                {
                    b.Property<int>("ComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("complaintId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComplaintId"));

                    b.Property<int?>("AssignedModeratorId")
                        .HasColumnType("int")
                        .HasColumnName("assignedModeratorId");

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("bookingId");

                    b.Property<string>("ComplaintType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("complaintType");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("ReportedUserId")
                        .HasColumnType("int")
                        .HasColumnName("reportedUserId");

                    b.Property<int>("ReporterId")
                        .HasColumnType("int")
                        .HasColumnName("reporterId");

                    b.Property<string>("ResolutionNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("resolutionNotes");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ComplaintId")
                        .HasName("PK__Complain__489708C12E34784F");

                    b.HasIndex("AssignedModeratorId");

                    b.HasIndex("BookingId");

                    b.HasIndex("ReportedUserId");

                    b.HasIndex("ReporterId");

                    b.ToTable("Complaint", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Conversation", b =>
                {
                    b.Property<int>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("conversationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConversationId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt");

                    b.HasKey("ConversationId")
                        .HasName("PK__Conversation__ConversationId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Conversation_CreatedAt");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Conversation_Status");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Conversation_Type");

                    b.ToTable("Conversation", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.ConversationParticipant", b =>
                {
                    b.Property<int>("ConversationParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("conversationParticipantId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConversationParticipantId"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("int")
                        .HasColumnName("conversationId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<DateTime?>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("joinedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("LeftAt")
                        .HasColumnType("datetime")
                        .HasColumnName("leftAt");

                    b.Property<string>("Role")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("role");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("ConversationParticipantId")
                        .HasName("PK__ConversationParticipant__ConversationParticipantId");

                    b.HasIndex("ConversationId")
                        .HasDatabaseName("IX_ConversationParticipant_ConversationId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_ConversationParticipant_IsActive");

                    b.HasIndex("Role")
                        .HasDatabaseName("IX_ConversationParticipant_Role");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_ConversationParticipant_UserId");

                    b.ToTable("ConversationParticipant", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.DeviceInfo", b =>
                {
                    b.Property<int>("DeviceInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("deviceInfoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeviceInfoId"));

                    b.Property<string>("BatteryCapacity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("batteryCapacity");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("brand");

                    b.Property<string>("CameraResolution")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("cameraResolution");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("deviceType");

                    b.Property<string>("Features")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("features");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("lastUsedAt");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("model");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("notes");

                    b.Property<string>("OperatingSystem")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("operatingSystem");

                    b.Property<string>("OsVersion")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("osVersion");

                    b.Property<int>("PhotographerId")
                        .HasColumnType("int")
                        .HasColumnName("photographerId");

                    b.Property<string>("ScreenResolution")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("screenResolution");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("StorageCapacity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("storageCapacity");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt");

                    b.HasKey("DeviceInfoId")
                        .HasName("PK__DeviceInfo__DeviceInfoId");

                    b.HasIndex("Brand")
                        .HasDatabaseName("IX_DeviceInfo_Brand");

                    b.HasIndex("DeviceType")
                        .HasDatabaseName("IX_DeviceInfo_DeviceType");

                    b.HasIndex("LastUsedAt")
                        .HasDatabaseName("IX_DeviceInfo_LastUsedAt");

                    b.HasIndex("PhotographerId")
                        .HasDatabaseName("IX_DeviceInfo_PhotographerId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_DeviceInfo_Status");

                    b.ToTable("DeviceInfo", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.EventBooking", b =>
                {
                    b.Property<int>("EventBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eventBookingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventBookingId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("bookingId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("eventId");

                    b.Property<int>("EventPhotographerId")
                        .HasColumnType("int")
                        .HasColumnName("eventPhotographerId");

                    b.Property<decimal>("EventPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("eventPrice");

                    b.HasKey("EventBookingId")
                        .HasName("PK__EventBooking__EventBookingId");

                    b.HasIndex("BookingId")
                        .IsUnique()
                        .HasDatabaseName("IX_EventBooking_BookingId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_EventBooking_CreatedAt");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_EventBooking_EventId");

                    b.HasIndex("EventPhotographerId")
                        .HasDatabaseName("IX_EventBooking_EventPhotographerId");

                    b.ToTable("EventBooking", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.EventPhotographer", b =>
                {
                    b.Property<int>("EventPhotographerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eventPhotographerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventPhotographerId"));

                    b.Property<DateTime>("AppliedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("appliedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("approvedAt");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("eventId");

                    b.Property<int>("PhotographerId")
                        .HasColumnType("int")
                        .HasColumnName("photographerId");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("rejectionReason");

                    b.Property<decimal?>("SpecialRate")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("specialRate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("status");

                    b.HasKey("EventPhotographerId")
                        .HasName("PK__EventPhotographer__EventPhotographerId");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_EventPhotographer_EventId");

                    b.HasIndex("PhotographerId")
                        .HasDatabaseName("IX_EventPhotographer_PhotographerId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_EventPhotographer_Status");

                    b.HasIndex("EventId", "PhotographerId")
                        .IsUnique()
                        .HasDatabaseName("IX_EventPhotographer_Event_Photographer_Unique");

                    b.ToTable("EventPhotographer", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("caption");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_primary");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotographerId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("url");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Image_Id");

                    b.HasIndex("EventId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PhotographerId");

                    b.HasIndex("UserId");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("locationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("Amenities")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("amenities");

                    b.Property<string>("AvailabilityStatus")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("availabilityStatus");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("ExternalPlaceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("FeaturedStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("featuredStatus");

                    b.Property<decimal?>("HourlyRate")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("hourlyRate");

                    b.Property<bool?>("Indoor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("indoor");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<int>("LocationOwnerId")
                        .HasColumnType("int")
                        .HasColumnName("locationOwnerId");

                    b.Property<string>("LocationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("Outdoor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("outdoor");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("VerificationStatus")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("verificationStatus");

                    b.HasKey("LocationId")
                        .HasName("PK__Location__30646B6EDF76987D");

                    b.HasIndex("LocationOwnerId");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.LocationEvent", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eventId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<decimal?>("DiscountedPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("discountedPrice");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("endDate");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("locationId");

                    b.Property<int>("MaxBookingsPerSlot")
                        .HasColumnType("int")
                        .HasColumnName("maxBookingsPerSlot");

                    b.Property<int>("MaxPhotographers")
                        .HasColumnType("int")
                        .HasColumnName("maxPhotographers");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal?>("OriginalPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("originalPrice");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("startDate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("EventId")
                        .HasName("PK__LocationEvent__EventId");

                    b.HasIndex("EndDate")
                        .HasDatabaseName("IX_LocationEvent_EndDate");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("IX_LocationEvent_LocationId");

                    b.HasIndex("StartDate")
                        .HasDatabaseName("IX_LocationEvent_StartDate");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_LocationEvent_Status");

                    b.HasIndex("Status", "StartDate", "EndDate")
                        .HasDatabaseName("IX_LocationEvent_Status_DateRange");

                    b.ToTable("LocationEvent", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.LocationOwner", b =>
                {
                    b.Property<int>("LocationOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("locationOwnerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationOwnerId"));

                    b.Property<string>("BusinessAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("businessAddress");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("businessName");

                    b.Property<string>("BusinessRegistrationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("businessRegistrationNumber");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<string>("VerificationStatus")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("verificationStatus");

                    b.HasKey("LocationOwnerId")
                        .HasName("PK__Location__0285A3BB6376E1CF");

                    b.HasIndex("UserId");

                    b.ToTable("LocationOwner", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Messagess", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("messageId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("Content")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("content");

                    b.Property<int?>("ConversationId")
                        .HasColumnType("int")
                        .HasColumnName("conversationId");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MessageType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("messageType");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime")
                        .HasColumnName("readAt");

                    b.Property<int?>("RecipientId")
                        .HasColumnType("int")
                        .HasColumnName("recipientId");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("senderId");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.HasKey("MessageId")
                        .HasName("PK__Messages__4808B993F0C0786B");

                    b.HasIndex("ConversationId")
                        .HasDatabaseName("IX_Messagess_ConversationId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Messagess_CreatedAt");

                    b.HasIndex("RecipientId")
                        .HasDatabaseName("IX_Messagess_RecipientId");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("IX_Messagess_SenderId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Messagess_Status");

                    b.ToTable("Messagess", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Moderator", b =>
                {
                    b.Property<int>("ModeratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("moderatorId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModeratorId"));

                    b.Property<string>("AreasOfFocus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("areasOfFocus");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("ModeratorId")
                        .HasName("PK__Moderato__CA327EF233C4DF91");

                    b.HasIndex("UserId");

                    b.ToTable("Moderator", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Notification", b =>
                {
                    b.Property<int>("MotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("motificationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MotificationId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NotificationType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("notificationType");

                    b.Property<bool?>("ReadStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("readStatus");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int")
                        .HasColumnName("referenceId");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("MotificationId")
                        .HasName("PK__Notifica__9F9C8614B3C7E2AF");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("paymentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("bookingId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("VND")
                        .HasColumnName("currency");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<string>("ExternalTransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("externalTransactionId");

                    b.Property<string>("Method")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("PayOS")
                        .HasColumnName("method");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("totalAmount");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payment__A0D9EFC6D01669A5");

                    b.HasIndex("BookingId")
                        .IsUnique()
                        .HasFilter("[bookingId] IS NOT NULL");

                    b.HasIndex("CustomerId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.PhotoDelivery", b =>
                {
                    b.Property<int>("PhotoDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("photoDeliveryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotoDeliveryId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("bookingId");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deliveredAt");

                    b.Property<string>("DeliveryMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("deliveryMethod");

                    b.Property<string>("DriveFolderName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("driveFolderName");

                    b.Property<string>("DriveLink")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("driveLink");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime")
                        .HasColumnName("expiresAt");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("notes");

                    b.Property<int?>("PhotoCount")
                        .HasColumnType("int")
                        .HasColumnName("photoCount");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt");

                    b.Property<DateTime?>("UploadedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("uploadedAt");

                    b.HasKey("PhotoDeliveryId")
                        .HasName("PK__PhotoDelivery__PhotoDeliveryId");

                    b.HasIndex("BookingId")
                        .IsUnique()
                        .HasDatabaseName("IX_PhotoDelivery_BookingId");

                    b.HasIndex("DeliveryMethod")
                        .HasDatabaseName("IX_PhotoDelivery_DeliveryMethod");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_PhotoDelivery_Status");

                    b.ToTable("PhotoDelivery", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Photographer", b =>
                {
                    b.Property<int>("PhotographerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("photographerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotographerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AvailabilityStatus")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("availabilityStatus");

                    b.Property<string>("Equipment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("equipment");

                    b.Property<bool?>("FeaturedStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("featuredStatus");

                    b.Property<string>("GoogleMapsAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("HourlyRate")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("hourlyRate");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(3, 2)")
                        .HasColumnName("rating");

                    b.Property<int?>("RatingCount")
                        .HasColumnType("int")
                        .HasColumnName("ratingCount");

                    b.Property<decimal?>("RatingSum")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("ratingSum");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<string>("VerificationStatus")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("verificationStatus");

                    b.Property<int?>("YearsExperience")
                        .HasColumnType("int")
                        .HasColumnName("yearsExperience");

                    b.HasKey("PhotographerId")
                        .HasName("PK__Photogra__476AAC030CF022A8");

                    b.HasIndex("UserId");

                    b.ToTable("Photographer", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.PhotographerStyle", b =>
                {
                    b.Property<int>("PhotographerStyleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("photographerStyleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotographerStyleId"));

                    b.Property<int>("PhotographerId")
                        .HasColumnType("int")
                        .HasColumnName("photographerId");

                    b.Property<int>("StyleId")
                        .HasColumnType("int")
                        .HasColumnName("styleId");

                    b.HasKey("PhotographerStyleId")
                        .HasName("PK__Photogra__D64320D6694031E8");

                    b.HasIndex("PhotographerId");

                    b.HasIndex("StyleId");

                    b.ToTable("PhotographerStyle", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.PremiumPackage", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("packageId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<string>("ApplicableTo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("applicableTo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("DurationDays")
                        .HasColumnType("int")
                        .HasColumnName("durationDays");

                    b.Property<string>("Features")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("features");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.HasKey("PackageId")
                        .HasName("PK__PremiumP__AA8D20C86F773089");

                    b.ToTable("PremiumPackage", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.PremiumSubscription", b =>
                {
                    b.Property<int>("PremiumSubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("premiumSubscriptionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PremiumSubscriptionId"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("endDate");

                    b.Property<int>("PackageId")
                        .HasColumnType("int")
                        .HasColumnName("packageId");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("paymentId");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("startDate");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("PremiumSubscriptionId")
                        .HasName("PK__PremiumS__CE9A698AE4183E7A");

                    b.HasIndex("PackageId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("PremiumSubscription", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reviewId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("bookingId");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<int>("RevieweeId")
                        .HasColumnType("int")
                        .HasColumnName("revieweeId");

                    b.Property<string>("RevieweeType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("revieweeType");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int")
                        .HasColumnName("reviewerId");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ReviewId")
                        .HasName("PK__Review__2ECD6E04FCF9D780");

                    b.HasIndex("BookingId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("roleDescription");

                    b.Property<string>("RoleName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("roleName");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__CD98462AC9EEEE46");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Style", b =>
                {
                    b.Property<int>("StyleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("styleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StyleId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("StyleId")
                        .HasName("PK__Style__1F798D1E10021AA4");

                    b.ToTable("Style", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("transactionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("VND")
                        .HasColumnName("currency");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int")
                        .HasColumnName("fromUserId");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<int?>("ReferencePaymentId")
                        .HasColumnType("int")
                        .HasColumnName("referencePaymentId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<int?>("ToUserId")
                        .HasColumnType("int")
                        .HasColumnName("toUserId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("TransactionId")
                        .HasName("PK__Transact__9B57CF7272086B9B");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ReferencePaymentId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Bio")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("bio");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fullName");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("passwordHash");

                    b.Property<int?>("PasswordResetAttempts")
                        .HasColumnType("int");

                    b.Property<string>("PasswordResetCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phoneNumber");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("profileImage");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updateAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("userName");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__CB9A1CFF1A716FE7");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userRoleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<DateTime?>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assignedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("UserRoleId")
                        .HasName("PK__UserRole__CD3149CC42F7DFB1");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.UserStyle", b =>
                {
                    b.Property<int>("UserStyleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userStyleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserStyleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("StyleId")
                        .HasColumnType("int")
                        .HasColumnName("styleId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("UserStyleId")
                        .HasName("PK__UserStyle__476AAC030CF022A8");

                    b.HasIndex("StyleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserStyle", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("walletId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<decimal?>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("balance");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("WalletId")
                        .HasName("PK__Wallet__A5C5D5C5D5C5D5C5");

                    b.HasIndex("UserId");

                    b.ToTable("Wallet", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.WithdrawalRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<string>("BankAccountName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bankAccountName");

                    b.Property<string>("BankAccountNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bankAccountNumber");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bankName");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("processedAt");

                    b.Property<int?>("ProcessedByModeratorId")
                        .HasColumnType("int")
                        .HasColumnName("processedByModeratorId");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rejectionReason");

                    b.Property<string>("RequestStatus")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("requestStatus");

                    b.Property<DateTime?>("RequestedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("requestedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("WalletId")
                        .HasColumnType("int")
                        .HasColumnName("walletId");

                    b.HasKey("Id")
                        .HasName("PK__Withdraw__3213E83FE86C5098");

                    b.HasIndex("WalletId");

                    b.ToTable("WithdrawalRequest", (string)null);
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Administrator", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("Administrators")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Administr__userI__6EF57B66");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Advertisement", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Location", "Location")
                        .WithMany("Advertisements")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK_Advertisement_Location");

                    b.HasOne("SnapLink_Repository.Entity.Payment", "Payment")
                        .WithMany("Advertisements")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_Advertisement_Payment");

                    b.Navigation("Location");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Availability", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Photographer", "Photographer")
                        .WithMany("Availabilities")
                        .HasForeignKey("PhotographerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Availability_Photographer");

                    b.Navigation("Photographer");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Booking", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Location", "Location")
                        .WithMany("Bookings")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK_Booking_Location");

                    b.HasOne("SnapLink_Repository.Entity.Photographer", "Photographer")
                        .WithMany("Bookings")
                        .HasForeignKey("PhotographerId")
                        .IsRequired()
                        .HasConstraintName("FK_Booking_Photographer");

                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Booking_Users");

                    b.Navigation("Location");

                    b.Navigation("Photographer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Complaint", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Moderator", "AssignedModerator")
                        .WithMany("Complaints")
                        .HasForeignKey("AssignedModeratorId")
                        .HasConstraintName("FK_Complaint_Moderator");

                    b.HasOne("SnapLink_Repository.Entity.Booking", "Booking")
                        .WithMany("Complaints")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK_Complaint_Booking");

                    b.HasOne("SnapLink_Repository.Entity.User", "ReportedUser")
                        .WithMany("ComplaintReportedUsers")
                        .HasForeignKey("ReportedUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Complaint_ReportedUser");

                    b.HasOne("SnapLink_Repository.Entity.User", "Reporter")
                        .WithMany("ComplaintReporters")
                        .HasForeignKey("ReporterId")
                        .IsRequired()
                        .HasConstraintName("FK_Complaint_Reporter");

                    b.Navigation("AssignedModerator");

                    b.Navigation("Booking");

                    b.Navigation("ReportedUser");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.ConversationParticipant", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Conversation", "Conversation")
                        .WithMany("Participants")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ConversationParticipant_Conversation");

                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("ConversationParticipants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ConversationParticipant_User");

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.DeviceInfo", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Photographer", "Photographer")
                        .WithMany("DeviceInfos")
                        .HasForeignKey("PhotographerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DeviceInfo_Photographer");

                    b.Navigation("Photographer");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.EventBooking", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Booking", "Booking")
                        .WithOne("EventBooking")
                        .HasForeignKey("SnapLink_Repository.Entity.EventBooking", "BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_EventBooking_Booking");

                    b.HasOne("SnapLink_Repository.Entity.LocationEvent", "Event")
                        .WithMany("EventBookings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_EventBooking_LocationEvent");

                    b.HasOne("SnapLink_Repository.Entity.EventPhotographer", "EventPhotographer")
                        .WithMany()
                        .HasForeignKey("EventPhotographerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_EventBooking_EventPhotographer");

                    b.Navigation("Booking");

                    b.Navigation("Event");

                    b.Navigation("EventPhotographer");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.EventPhotographer", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.LocationEvent", "Event")
                        .WithMany("EventPhotographers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EventPhotographer_LocationEvent");

                    b.HasOne("SnapLink_Repository.Entity.Photographer", "Photographer")
                        .WithMany("EventPhotographers")
                        .HasForeignKey("PhotographerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EventPhotographer_Photographer");

                    b.Navigation("Event");

                    b.Navigation("Photographer");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Image", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.LocationEvent", "LocationEvent")
                        .WithMany("Images")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SnapLink_Repository.Entity.Location", "Location")
                        .WithMany("Images")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SnapLink_Repository.Entity.Photographer", "Photographer")
                        .WithMany("Images")
                        .HasForeignKey("PhotographerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Location");

                    b.Navigation("LocationEvent");

                    b.Navigation("Photographer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Location", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.LocationOwner", "LocationOwner")
                        .WithMany("Locations")
                        .HasForeignKey("LocationOwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_Location_LocationOwner");

                    b.Navigation("LocationOwner");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.LocationEvent", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Location", "Location")
                        .WithMany("LocationEvents")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LocationEvent_Location");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.LocationOwner", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("LocationOwners")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_LocationOwner_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Messagess", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .HasConstraintName("FK_Messagess_Conversation");

                    b.HasOne("SnapLink_Repository.Entity.User", "Recipient")
                        .WithMany("MessagessRecipients")
                        .HasForeignKey("RecipientId")
                        .HasConstraintName("FK_Messagess_Recipient");

                    b.HasOne("SnapLink_Repository.Entity.User", "Sender")
                        .WithMany("MessagessSenders")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("FK_Messagess_Sender");

                    b.Navigation("Conversation");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Moderator", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("Moderators")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Moderator_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Notification", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Payment", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("SnapLink_Repository.Entity.Payment", "BookingId")
                        .HasConstraintName("FK_Payment_Booking");

                    b.HasOne("SnapLink_Repository.Entity.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Payment_Customer");

                    b.Navigation("Booking");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.PhotoDelivery", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Booking", "Booking")
                        .WithOne("PhotoDelivery")
                        .HasForeignKey("SnapLink_Repository.Entity.PhotoDelivery", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PhotoDelivery_Booking");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Photographer", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("Photographers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Photographer_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.PhotographerStyle", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Photographer", "Photographer")
                        .WithMany("PhotographerStyles")
                        .HasForeignKey("PhotographerId")
                        .IsRequired()
                        .HasConstraintName("FK_PhotographerStyle_Photographer");

                    b.HasOne("SnapLink_Repository.Entity.Style", "Style")
                        .WithMany("PhotographerStyles")
                        .HasForeignKey("StyleId")
                        .IsRequired()
                        .HasConstraintName("FK_PhotographerStyle_Style");

                    b.Navigation("Photographer");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.PremiumSubscription", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.PremiumPackage", "Package")
                        .WithMany("PremiumSubscriptions")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("FK_PremiumSubscription_PremiumPackage");

                    b.HasOne("SnapLink_Repository.Entity.Payment", "Payment")
                        .WithMany("PremiumSubscriptions")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_PremiumSubscription_Payment");

                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("PremiumSubscriptions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_PremiumSubscription_Users");

                    b.Navigation("Package");

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Review", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Booking", "Booking")
                        .WithMany("Reviews")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK_Review_Booking");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Transaction", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.User", "FromUser")
                        .WithMany("FromTransactions")
                        .HasForeignKey("FromUserId")
                        .HasConstraintName("FK_Transaction_FromUser");

                    b.HasOne("SnapLink_Repository.Entity.Payment", "ReferencePayment")
                        .WithMany("Transactions")
                        .HasForeignKey("ReferencePaymentId")
                        .HasConstraintName("FK_Transaction_Payment");

                    b.HasOne("SnapLink_Repository.Entity.User", "ToUser")
                        .WithMany("ToTransactions")
                        .HasForeignKey("ToUserId")
                        .HasConstraintName("FK_Transaction_ToUser");

                    b.Navigation("FromUser");

                    b.Navigation("ReferencePayment");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.UserRole", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRole_Role");

                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRole_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.UserStyle", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Style", "Style")
                        .WithMany("UserStyles")
                        .HasForeignKey("StyleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserStyle_Style");

                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("UserStyles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserStyle_User");

                    b.Navigation("Style");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Wallet", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Wallet_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.WithdrawalRequest", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Wallet", "Wallet")
                        .WithMany("WithdrawalRequests")
                        .HasForeignKey("WalletId")
                        .IsRequired()
                        .HasConstraintName("FK_WithdrawalRequest_Wallet");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Booking", b =>
                {
                    b.Navigation("Complaints");

                    b.Navigation("EventBooking");

                    b.Navigation("Payment");

                    b.Navigation("PhotoDelivery");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Conversation", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Location", b =>
                {
                    b.Navigation("Advertisements");

                    b.Navigation("Bookings");

                    b.Navigation("Images");

                    b.Navigation("LocationEvents");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.LocationEvent", b =>
                {
                    b.Navigation("EventBookings");

                    b.Navigation("EventPhotographers");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.LocationOwner", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Moderator", b =>
                {
                    b.Navigation("Complaints");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Payment", b =>
                {
                    b.Navigation("Advertisements");

                    b.Navigation("PremiumSubscriptions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Photographer", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("Bookings");

                    b.Navigation("DeviceInfos");

                    b.Navigation("EventPhotographers");

                    b.Navigation("Images");

                    b.Navigation("PhotographerStyles");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.PremiumPackage", b =>
                {
                    b.Navigation("PremiumSubscriptions");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Style", b =>
                {
                    b.Navigation("PhotographerStyles");

                    b.Navigation("UserStyles");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.User", b =>
                {
                    b.Navigation("Administrators");

                    b.Navigation("Bookings");

                    b.Navigation("ComplaintReportedUsers");

                    b.Navigation("ComplaintReporters");

                    b.Navigation("ConversationParticipants");

                    b.Navigation("FromTransactions");

                    b.Navigation("Images");

                    b.Navigation("LocationOwners");

                    b.Navigation("MessagessRecipients");

                    b.Navigation("MessagessSenders");

                    b.Navigation("Moderators");

                    b.Navigation("Notifications");

                    b.Navigation("Photographers");

                    b.Navigation("PremiumSubscriptions");

                    b.Navigation("ToTransactions");

                    b.Navigation("UserRoles");

                    b.Navigation("UserStyles");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Wallet", b =>
                {
                    b.Navigation("WithdrawalRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
