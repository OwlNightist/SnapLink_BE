// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SnapLink_Repository.DBContext;

#nullable disable

namespace SnapLink_API.Migrations
{
    [DbContext(typeof(SnaplinkDbContext))]
    partial class SnaplinkDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SnapLink_Repository.Entity.Administrator", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("AccessLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Availability", b =>
                {
                    b.Property<int>("AvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvailabilityId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("PhotographerId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AvailabilityId");

                    b.HasIndex("PhotographerId");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDatetime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("PhotographerId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialRequests")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("StartDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("TotalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PhotographerId", "Status");

                    b.HasIndex("UserId", "Status");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Complaint", b =>
                {
                    b.Property<int>("ComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComplaintId"));

                    b.Property<int?>("AssignedModeratorId")
                        .HasColumnType("int");

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("ComplaintType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("ModeratorId")
                        .HasColumnType("int");

                    b.Property<int>("ReportedUserId")
                        .HasColumnType("int");

                    b.Property<int>("ReporterId")
                        .HasColumnType("int");

                    b.Property<string>("ResolutionNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ComplaintId");

                    b.HasIndex("AssignedModeratorId");

                    b.HasIndex("BookingId");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("ReportedUserId");

                    b.HasIndex("ReporterId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Conversation", b =>
                {
                    b.Property<int>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConversationId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ConversationId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.ConversationParticipant", b =>
                {
                    b.Property<int>("ConversationParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConversationParticipantId"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LeftAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ConversationParticipantId");

                    b.HasIndex("UserId");

                    b.HasIndex("ConversationId", "UserId")
                        .IsUnique();

                    b.ToTable("ConversationParticipants");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeviceId"));

                    b.Property<string>("AppVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceId_External")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExpoPushToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OsVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DeviceId");

                    b.HasIndex("ExpoPushToken")
                        .HasDatabaseName("IX_Devices_ExpoPushToken");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Devices_IsActive");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Devices_UserId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.EventBooking", b =>
                {
                    b.Property<int>("EventBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventBookingId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("EventPhotographerId")
                        .HasColumnType("int");

                    b.Property<decimal>("EventPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("LocationEventEventId")
                        .HasColumnType("int");

                    b.HasKey("EventBookingId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("EventId");

                    b.HasIndex("EventPhotographerId");

                    b.HasIndex("LocationEventEventId");

                    b.ToTable("EventBookings");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.EventPhotographer", b =>
                {
                    b.Property<int>("EventPhotographerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventPhotographerId"));

                    b.Property<DateTime>("AppliedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationEventEventId")
                        .HasColumnType("int");

                    b.Property<int>("PhotographerId")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("SpecialRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("EventPhotographerId");

                    b.HasIndex("EventId");

                    b.HasIndex("LocationEventEventId");

                    b.HasIndex("PhotographerId");

                    b.ToTable("EventPhotographers");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotographerId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PhotographerId");

                    b.HasIndex("UserId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Amenities")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("AvailabilityStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ExternalPlaceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("FeaturedStatus")
                        .HasColumnType("bit");

                    b.Property<decimal?>("HourlyRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool?>("Indoor")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("float(10)");

                    b.Property<int?>("LocationOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("LocationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("float(11)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("Outdoor")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LocationId");

                    b.HasIndex("LocationOwnerId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.LocationEvent", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("DiscountedPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("MaxBookingsPerSlot")
                        .HasColumnType("int");

                    b.Property<int>("MaxPhotographers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("OriginalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationEvents");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.LocationOwner", b =>
                {
                    b.Property<int>("LocationOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationOwnerId"));

                    b.Property<string>("BusinessAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BusinessRegistrationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VerificationStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LocationOwnerId");

                    b.HasIndex("UserId");

                    b.ToTable("LocationOwners");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Messagess", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("Content")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("ConversationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RecipientId")
                        .HasColumnType("int");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MessageId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messagesses");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Moderator", b =>
                {
                    b.Property<int>("ModeratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModeratorId"));

                    b.Property<string>("AreasOfFocus")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ModeratorId");

                    b.HasIndex("UserId");

                    b.ToTable("Moderators");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Notification", b =>
                {
                    b.Property<int>("MotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MotificationId"));

                    b.Property<string>("Content")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalTransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId")
                        .IsUnique()
                        .HasFilter("[BookingId] IS NOT NULL");

                    b.HasIndex("CustomerId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.PhotoDelivery", b =>
                {
                    b.Property<int>("PhotoDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotoDeliveryId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DriveFolderName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DriveLink")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PhotoCount")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PhotoDeliveryId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("PhotoDeliveries");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Photographer", b =>
                {
                    b.Property<int>("PhotographerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotographerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AvailabilityStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Equipment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("FeaturedStatus")
                        .HasColumnType("bit");

                    b.Property<string>("GoogleMapsAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("HourlyRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<double?>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("float(10)");

                    b.Property<double?>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("float(11)");

                    b.Property<decimal?>("Rating")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<int?>("RatingCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("RatingSum")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VerificationStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("YearsExperience")
                        .HasColumnType("int");

                    b.HasKey("PhotographerId");

                    b.HasIndex("UserId");

                    b.ToTable("Photographers");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.PhotographerStyle", b =>
                {
                    b.Property<int>("PhotographerStyleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotographerStyleId"));

                    b.Property<int>("PhotographerId")
                        .HasColumnType("int");

                    b.Property<int>("StyleId")
                        .HasColumnType("int");

                    b.HasKey("PhotographerStyleId");

                    b.HasIndex("StyleId");

                    b.HasIndex("PhotographerId", "StyleId")
                        .IsUnique();

                    b.ToTable("PhotographerStyles");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.PremiumPackage", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<string>("ApplicableTo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("DurationDays")
                        .HasColumnType("int");

                    b.Property<string>("Features")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PackageId");

                    b.ToTable("PremiumPackages");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.PremiumSubscription", b =>
                {
                    b.Property<int>("PremiumSubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PremiumSubscriptionId"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotographerId")
                        .HasColumnType("int");

                    b.Property<int?>("PremiumPackagePackageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PremiumSubscriptionId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PackageId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PhotographerId");

                    b.HasIndex("PremiumPackagePackageId");

                    b.HasIndex("UserId");

                    b.ToTable("PremiumSubscriptions");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotographerId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewerUserId")
                        .HasColumnType("int");

                    b.Property<byte>("Score")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RatingId");

                    b.HasIndex("BookingId");

                    b.HasIndex("ReviewerUserId");

                    b.HasIndex("LocationId", "CreatedAt");

                    b.HasIndex("PhotographerId", "CreatedAt");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Style", b =>
                {
                    b.Property<int>("StyleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StyleId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StyleId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Styles");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ReferencePaymentId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("ToUserId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionId");

                    b.HasIndex("ReferencePaymentId");

                    b.HasIndex("FromUserId", "CreatedAt");

                    b.HasIndex("ToUserId", "CreatedAt");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PasswordResetAttempts")
                        .HasColumnType("int");

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("PasswordResetExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<DateTime?>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL AND [RoleId] IS NOT NULL");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.UserStyle", b =>
                {
                    b.Property<int>("UserStyleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserStyleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("StyleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserStyleId");

                    b.HasIndex("StyleId");

                    b.HasIndex("UserId", "StyleId")
                        .IsUnique();

                    b.ToTable("UserStyles");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<decimal?>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.WithdrawalRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("BankAccountName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankAccountNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProcessedByModeratorId")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RequestStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("WithdrawalRequests");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Administrator", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("Administrators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Availability", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Photographer", "Photographer")
                        .WithMany("Availabilities")
                        .HasForeignKey("PhotographerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Photographer");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Booking", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Location", "Location")
                        .WithMany("Bookings")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnapLink_Repository.Entity.Photographer", "Photographer")
                        .WithMany("Bookings")
                        .HasForeignKey("PhotographerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Photographer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Complaint", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Moderator", "AssignedModerator")
                        .WithMany()
                        .HasForeignKey("AssignedModeratorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SnapLink_Repository.Entity.Booking", "Booking")
                        .WithMany("Complaints")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SnapLink_Repository.Entity.Moderator", null)
                        .WithMany("Complaints")
                        .HasForeignKey("ModeratorId");

                    b.HasOne("SnapLink_Repository.Entity.User", "ReportedUser")
                        .WithMany("ComplaintReportedUsers")
                        .HasForeignKey("ReportedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SnapLink_Repository.Entity.User", "Reporter")
                        .WithMany("ComplaintReporters")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AssignedModerator");

                    b.Navigation("Booking");

                    b.Navigation("ReportedUser");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.ConversationParticipant", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Conversation", "Conversation")
                        .WithMany("Participants")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("ConversationParticipants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Device", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.EventBooking", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Booking", "Booking")
                        .WithOne("EventBooking")
                        .HasForeignKey("SnapLink_Repository.Entity.EventBooking", "BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SnapLink_Repository.Entity.LocationEvent", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SnapLink_Repository.Entity.EventPhotographer", "EventPhotographer")
                        .WithMany()
                        .HasForeignKey("EventPhotographerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SnapLink_Repository.Entity.LocationEvent", null)
                        .WithMany("EventBookings")
                        .HasForeignKey("LocationEventEventId");

                    b.Navigation("Booking");

                    b.Navigation("Event");

                    b.Navigation("EventPhotographer");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.EventPhotographer", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.LocationEvent", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SnapLink_Repository.Entity.LocationEvent", null)
                        .WithMany("EventPhotographers")
                        .HasForeignKey("LocationEventEventId");

                    b.HasOne("SnapLink_Repository.Entity.Photographer", "Photographer")
                        .WithMany("EventPhotographers")
                        .HasForeignKey("PhotographerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Photographer");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Image", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.LocationEvent", "LocationEvent")
                        .WithMany("Images")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SnapLink_Repository.Entity.Location", "Location")
                        .WithMany("Images")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SnapLink_Repository.Entity.Photographer", "Photographer")
                        .WithMany("Images")
                        .HasForeignKey("PhotographerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Location");

                    b.Navigation("LocationEvent");

                    b.Navigation("Photographer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Location", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.LocationOwner", "LocationOwner")
                        .WithMany("Locations")
                        .HasForeignKey("LocationOwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LocationOwner");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.LocationEvent", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Location", "Location")
                        .WithMany("LocationEvents")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.LocationOwner", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("LocationOwners")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Messagess", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SnapLink_Repository.Entity.User", "Recipient")
                        .WithMany("MessagessRecipients")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SnapLink_Repository.Entity.User", "Sender")
                        .WithMany("MessagessSenders")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Conversation");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Moderator", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("Moderators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Notification", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Payment", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("SnapLink_Repository.Entity.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SnapLink_Repository.Entity.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.PhotoDelivery", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Booking", "Booking")
                        .WithOne("PhotoDelivery")
                        .HasForeignKey("SnapLink_Repository.Entity.PhotoDelivery", "BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Photographer", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("Photographers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.PhotographerStyle", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Photographer", "Photographer")
                        .WithMany("PhotographerStyles")
                        .HasForeignKey("PhotographerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SnapLink_Repository.Entity.Style", "Style")
                        .WithMany("PhotographerStyles")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Photographer");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.PremiumSubscription", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Location", "Location")
                        .WithMany("PremiumSubscriptions")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SnapLink_Repository.Entity.PremiumPackage", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SnapLink_Repository.Entity.Payment", "Payment")
                        .WithMany("PremiumSubscriptions")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SnapLink_Repository.Entity.Photographer", "Photographer")
                        .WithMany("PremiumSubscriptions")
                        .HasForeignKey("PhotographerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SnapLink_Repository.Entity.PremiumPackage", null)
                        .WithMany("PremiumSubscriptions")
                        .HasForeignKey("PremiumPackagePackageId");

                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("PremiumSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Package");

                    b.Navigation("Payment");

                    b.Navigation("Photographer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Rating", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Booking", "Booking")
                        .WithMany("Ratings")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SnapLink_Repository.Entity.Location", "Location")
                        .WithMany("Ratings")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SnapLink_Repository.Entity.Photographer", "Photographer")
                        .WithMany("Ratings")
                        .HasForeignKey("PhotographerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SnapLink_Repository.Entity.User", "ReviewerUser")
                        .WithMany("RatingsAuthored")
                        .HasForeignKey("ReviewerUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Location");

                    b.Navigation("Photographer");

                    b.Navigation("ReviewerUser");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Transaction", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.User", "FromUser")
                        .WithMany("FromTransactions")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SnapLink_Repository.Entity.Payment", "ReferencePayment")
                        .WithMany("Transactions")
                        .HasForeignKey("ReferencePaymentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SnapLink_Repository.Entity.User", "ToUser")
                        .WithMany("ToTransactions")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("FromUser");

                    b.Navigation("ReferencePayment");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.UserRole", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.UserStyle", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Style", "Style")
                        .WithMany("UserStyles")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("UserStyles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Style");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Wallet", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.WithdrawalRequest", b =>
                {
                    b.HasOne("SnapLink_Repository.Entity.Wallet", "Wallet")
                        .WithMany("WithdrawalRequests")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Booking", b =>
                {
                    b.Navigation("Complaints");

                    b.Navigation("EventBooking");

                    b.Navigation("Payment");

                    b.Navigation("PhotoDelivery");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Conversation", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Location", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Images");

                    b.Navigation("LocationEvents");

                    b.Navigation("PremiumSubscriptions");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.LocationEvent", b =>
                {
                    b.Navigation("EventBookings");

                    b.Navigation("EventPhotographers");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.LocationOwner", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Moderator", b =>
                {
                    b.Navigation("Complaints");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Payment", b =>
                {
                    b.Navigation("PremiumSubscriptions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Photographer", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("Bookings");

                    b.Navigation("EventPhotographers");

                    b.Navigation("Images");

                    b.Navigation("PhotographerStyles");

                    b.Navigation("PremiumSubscriptions");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.PremiumPackage", b =>
                {
                    b.Navigation("PremiumSubscriptions");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Style", b =>
                {
                    b.Navigation("PhotographerStyles");

                    b.Navigation("UserStyles");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.User", b =>
                {
                    b.Navigation("Administrators");

                    b.Navigation("Bookings");

                    b.Navigation("ComplaintReportedUsers");

                    b.Navigation("ComplaintReporters");

                    b.Navigation("ConversationParticipants");

                    b.Navigation("Devices");

                    b.Navigation("FromTransactions");

                    b.Navigation("Images");

                    b.Navigation("LocationOwners");

                    b.Navigation("MessagessRecipients");

                    b.Navigation("MessagessSenders");

                    b.Navigation("Moderators");

                    b.Navigation("Notifications");

                    b.Navigation("Photographers");

                    b.Navigation("PremiumSubscriptions");

                    b.Navigation("RatingsAuthored");

                    b.Navigation("ToTransactions");

                    b.Navigation("UserRoles");

                    b.Navigation("UserStyles");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("SnapLink_Repository.Entity.Wallet", b =>
                {
                    b.Navigation("WithdrawalRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
